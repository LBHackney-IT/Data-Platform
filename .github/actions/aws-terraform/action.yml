name: AWS Terraform
description: Runs Terraform against Hackney AWS
inputs:
  aws_access_key_id:
    description: 'AWS access key to use'
    required: true  
  aws_secret_access_key:
    description: 'AWS secret access key to use'
    required: true      
  aws_deploy_region:
    description: 'AWS region to deploy to'
    default: 'eu-west-2'
    required: true  
  terraform_state_s3_key_prefix:
    description: 'S3 key prefix for Terraform state'
    required: true
  build_path:
    description: 'Build path that contains the source'
    required: true
  environment:
    description: 'Name of the environemnt e.g. Dev, Stg, Prod, Mgmt'
    required: true
  automation_build_url:
    description: 'URL of the GitHub Action Run to pass to Terraform'
    required: true
  aws_deploy_account:
    description: 'AWS account id to deploy to'
    required: true
  aws_deploy_iam_role_name:
    description: 'AWS IAM role name to assume for deployment'
    required: true    
runs:
  using: "composite"
  steps: 
    - name: Terraform Init
      id: init
      run: |        
        echo "Configure AWS credentials"
        aws configure set default.region eu-west-2 > /dev/null 2>&1
        aws configure set aws_access_key_id ${{ inputs.aws_access_key_id }} > /dev/null 2>&1
        aws configure set aws_secret_access_key ${{ inputs.aws_secret_access_key }} > /dev/null 2>&1      
        terraform init -backend-config="region=eu-west-2" -backend-config="dynamodb_table=lbhackney-terraform-state-lock" -backend-config="encrypt=true" -backend-config="workspace_key_prefix=${{ inputs.terraform_state_s3_key_prefix }}" -backend-config="bucket=lbhackney-terraform-state" -backend-config="key=${{ inputs.terraform_state_s3_key_prefix }}/${{ inputs.environment }}-terraform.state"
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: Terraform Validate
      id: validate
      run: |
        terraform validate
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: Terraform Plan
      id: plan
      run: |  
        terraform plan -var-file='../config/terraform/${{ inputs.environment }}.tfvars' -var 'aws_deploy_region=${{ inputs.aws_deploy_region }}' -var 'aws_deploy_account=${{ inputs.aws_deploy_account }}' -var 'aws_deploy_iam_role_name=${{ inputs.aws_deploy_iam_role_name }}' -var 'environment=${{ inputs.environment }}' -var 'automation_build_url=${{ inputs.automation_build_url }}' -input=false -out=plan.out
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"   

    - name: Terraform Apply
      id: apply
      run: |
        terraform apply -auto-approve -input=false plan.out  
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

#     - name: Terraform Destroy
#       id: destroy
#       run: |
#         terraform destroy -auto-approve -var-file='../config/terraform/${{ inputs.environment }}.tfvars' -var 'aws_deploy_region=${{ inputs.aws_deploy_region }}' -var 'aws_deploy_account=${{ inputs.aws_deploy_account }}' -var 'aws_deploy_iam_role_name=${{ inputs.aws_deploy_iam_role_name }}' -var 'environment=${{ inputs.environment }}' -var 'automation_build_url=${{ inputs.automation_build_url }}'
#       shell: bash
#       working-directory: "${{ inputs.build_path }}/terraform"
