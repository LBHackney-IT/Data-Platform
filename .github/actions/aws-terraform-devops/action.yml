name: AWS Terraform (DevOps)
description: Runs Terraform against Hackney AWS
inputs:
  aws_access_key_id:
    description: "AWS access key to use"
    required: true
  aws_secret_access_key:
    description: "AWS secret access key to use"
    required: true
  aws_deploy_region:
    description: "AWS region to deploy to"
    default: "eu-west-2"
    required: true
  terraform_state_s3_key_prefix:
    description: "S3 key prefix for Terraform state"
    required: true
  build_path:
    description: "Build path that contains the source"
    required: true
  environment:
    description: "Name of the environemnt e.g. Dev, Stg, Prod, Mgmt"
    required: true
  automation_build_url:
    description: "URL of the GitHub Action Run to pass to Terraform"
    required: true
  aws_deploy_account:
    description: "AWS account id to deploy to"
    required: true
  aws_deploy_iam_role_name:
    description: "AWS IAM role name to assume for deployment"
    required: true
  branch:
    description: "Git branch being ran against"
    required: true
  tf_apply:
    description: "falg to control apply"
    default: "false"
    required: true
  tf_destroy:
    description: "falg to control destroy"
    default: "false"
    required: true
  terraform_import:
    description: "Terraform import statement"
    default: ""
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup build environment
      id: setup
      run: |
        ${{ github.action_path }}/box.sh "Setting up build environment"
        echo -e "Installing TFLint"
        curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint.zip && unzip tflint.zip && rm tflint.zip
        curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint-ruleset-aws/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint-ruleset.zip && unzip tflint-ruleset.zip && rm tflint-ruleset.zip
        mkdir -p ./.tflint.d/plugins/
        mv tflint-ruleset-aws ./.tflint.d/plugins/
        echo -e "\n"
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: Terraform Init
      id: init
      run: |
        ${{ github.action_path }}/box.sh "Running Terraform init"
        echo -e "Configuring AWS credentials."
        aws configure set default.region eu-west-2 > /dev/null 2>&1
        aws configure set aws_access_key_id ${{ inputs.aws_access_key_id }} > /dev/null 2>&1
        aws configure set aws_secret_access_key ${{ inputs.aws_secret_access_key }} > /dev/null 2>&1
        terraform init -backend-config="region=eu-west-2" -backend-config="dynamodb_table=lbhackney-terraform-state-lock" -backend-config="encrypt=true" -backend-config="workspace_key_prefix=${{ inputs.terraform_state_s3_key_prefix }}" -backend-config="bucket=lbhackney-terraform-state" -backend-config="key=${{ inputs.terraform_state_s3_key_prefix }}/${{ inputs.environment }}-terraform.state"
        echo -e "\n"
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: Terraform Import
      id: import
      run: |
        export TF_VAR_environment=${environment,,}
        if [ "${{ inputs.terraform_import }}" != "" ]; then
            ${{ github.action_path }}/box.sh "Running Terraform import"
            terraform import -var-file='../config/terraform/${{ inputs.environment }}.tfvars' -var 'aws_deploy_region=${{ inputs.aws_deploy_region }}' -var 'aws_deploy_account=${{ inputs.aws_deploy_account }}' -var 'aws_deploy_iam_role_name=${{ inputs.aws_deploy_iam_role_name }}' -var 'automation_build_url=${{ inputs.automation_build_url }}' ${{ inputs.terraform_import }}
        fi
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: Terraform Validate
      id: validate
      run: |
        ${{ github.action_path }}/box.sh "Running Terraform validate"
        terraform validate
        echo -e "\n"
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: TFLint
      id: lint
      run: |
        ${{ github.action_path }}/box.sh "Running TFLint"
        ./tflint --var-file='../config/terraform/${{ inputs.environment }}.tfvars' --var 'aws_deploy_region=${{ inputs.aws_deploy_region }}' --var 'aws_deploy_account=${{ inputs.aws_deploy_account }}' --var 'aws_deploy_iam_role_name=${{ inputs.aws_deploy_iam_role_name }}' --var 'automation_build_url=${{ inputs.automation_build_url }}' --module --config=${{ github.action_path }}/../../../.tflint.hcl --loglevel=info .
        echo -e "\n"
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: Terraform Plan
      id: plan
      run: |
        export TF_VAR_environment=${environment,,}
        if [ "${{ inputs.tf_destroy }}" = "true" ]; then
          echo -e "Flag tf_destroy is set to ${{ inputs.tf_destroy }}, so skipping Terraform plan."
          echo -e "\n"
        else
          ${{ github.action_path }}/box.sh "Running Terraform plan"
          terraform plan -var-file='../config/terraform/${{ inputs.environment }}.tfvars' -var 'aws_deploy_region=${{ inputs.aws_deploy_region }}' -var 'aws_deploy_account=${{ inputs.aws_deploy_account }}' -var 'aws_deploy_iam_role_name=${{ inputs.aws_deploy_iam_role_name }}' -var 'automation_build_url=${{ inputs.automation_build_url }}' -input=false -out=plan.out
          echo -e "\n"
        fi
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: Terraform Apply
      id: apply
      run: |
        if [ "${{ inputs.tf_apply }}" = "true" ]; then
          ${{ github.action_path }}/box.sh "Running Terraform apply"
          terraform apply -auto-approve -input=false plan.out
        else
          echo -e "Flag tf_apply is set to ${{ inputs.tf_apply }}, so skipping Terraform apply."
          echo -e "\n"
        fi
        echo -e "Terraform run completed successfully."
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"

    - name: Terraform Destroy
      id: destroy
      run: |
        export TF_VAR_environment=${environment,,}
        if [ "${{ inputs.tf_destroy }}" = "true" ]; then
          ${{ github.action_path }}/box.sh "Running Terraform destroy"
          terraform destroy -auto-approve  -var-file='../config/terraform/${{ inputs.environment }}.tfvars' -var 'aws_deploy_region=${{ inputs.aws_deploy_region }}' -var 'aws_deploy_account=${{ inputs.aws_deploy_account }}' -var 'aws_deploy_iam_role_name=${{ inputs.aws_deploy_iam_role_name }}' -var 'automation_build_url=${{ inputs.automation_build_url }}' -input=false
        else
          echo -e "Flag tf_destroy is set to ${{ inputs.tf_destroy }}, so skipping Terraform destroy."
        fi
        echo -e "Terraform run completed successfully."
      shell: bash
      working-directory: "${{ inputs.build_path }}/terraform"
