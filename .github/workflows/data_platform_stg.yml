name: Data-Platform (Staging)
concurrency: staging-deploy
env:
  aws_deploy_account: ${{ secrets.AWS_ACCOUNT_DATA_PLATFORM_STG }}
  aws_api_account: ${{ secrets.AWS_API_ACCOUNT_PROD }}
  aws_deploy_region: "eu-west-2"
  google_project_id: ${{ secrets.GOOGLE_PROJECT_ID_STG }}
  aws_api_vpc_id : ${{ secrets.AWS_API_VPC_ID }}
  environment: "stg"
  automation_build_url: "https://github.com/LBHackney-IT/data-platform/actions/workflows/data_platform_stg.yml"

  network_state_prefix: "data-platform-network"
  network_build_path: "./terraform-networking"

  main_state_prefix: "data-platform"
  main_build_path: "./terraform"

on:
  push:
    branches: ['*']
    paths-ignore:
      - "infrastructure/projects/**"
      - "infrastructure/platform/**"
  workflow_dispatch:
    inputs:
      terraform_import:
        description: "Terraform import statements"
        required: false
      terraform_remove:
        description: "Terraform state rm statements"
        required: false

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run `make test`
        run: |
          cd scripts
          make test
  validate:
    name: AWS Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Terraform Validate
        uses: ./.github/actions/aws-terraform/terraform-validate
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          terraform_state_s3_key_prefix: ${{ env.network_state_prefix }}
          build_path: ${{ env.network_build_path }}
          environment: ${{ env.environment }}

  build:
    needs: [tests, validate]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && needs.tests.result == 'success' && needs.validate.result == 'success'
    name: AWS Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 0.14.9
      - name: Add a key to allow access to Infastructure
        run: |
          echo "${{ secrets.INFRASTRUCTURE_PRIVATE_KEY }}" > id_rsa
          ssh-keyscan github.com > known_hosts
          chmod 400 id_rsa known_hosts
      - name: Setup Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Install pipenv
        run: |
          sudo apt-get update
          sudo apt-get install pipenv
      - name: Install dependencies in rds-database-snapshot-replicator lambda
        working-directory: "./lambdas/rds-database-snapshot-replicator"
        run: npm install
      - name: Install dependencies in liberator-sftp-to-s3 lambda
        working-directory: "./lambdas/liberator-sftp-to-s3"
        run: npm install
      - name: Set up Google Cloud Credentials
        run: |
          echo $GOOGLE_CREDENTIALS >> ./google_service_account_creds.json
        shell: bash
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS_STG }}
      - name: Install dependencies in g-drive-to-s3 lambda
        working-directory: "./lambdas/g_drive_to_s3"
        run: make install-requirements
      - name: Download external dependencies
        working-directory: "./external-lib"
        run: make all
      - name: Package glue job helpers module
        working-directory: "./scripts"
        run: make dist/data_platform_glue_job_helpers-1.0-py3-none-any.whl
      - name: Deploy Data Platform Network
        uses: ./.github/actions/aws-terraform
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_deploy_region: ${{ env.aws_deploy_region }}
          aws_api_vpc_id: ${{ env.aws_api_vpc_id }}
          terraform_state_s3_key_prefix: ${{ env.network_state_prefix }}
          build_path: ${{ env.network_build_path }}
          automation_build_url: ${{ env.automation_build_url }}
          environment: ${{ env.environment }}
          google_project_id: ${{ env.google_project_id }}
          aws_deploy_account: ${{ env.aws_deploy_account }}
          aws_api_account: ${{ env.aws_api_account }}
          aws_hackit_account_id: ${{ secrets.AWS_HACKIT_ACCOUNT_ID }}
          aws_deploy_iam_role_name: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          branch: ${GITHUB_REF##*/}
          terraform_import: ${{ github.event.inputs.terraform_import }}
          terraform_remove: ${{ github.event.inputs.terraform_remove }}
          # DANGER ZONE
          # In order to allow you to run a Terraform destroy (that will delete all AWS resources managed by Terraform,
          # you can set terraform_destroy: 'destroy_me'. Not providing a value or any other value except 'destroy_me' will
          # cause nothing to happen. The example here, with the value set to false is to ensure you've read this comment ;)
          terraform_destroy: false
      - name: Assign Network Properties
        working-directory: "./terraform-networking"
        run: |
          VPC_ID=$(terraform output vpc_id)
          echo "aws_vpc_id=$VPC_ID" >> ../config/terraform/stg.tfvars
      - name: Deploy Data Platform Infastructure
        uses: ./.github/actions/aws-terraform
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_deploy_region: ${{ env.aws_deploy_region }}
          aws_api_vpc_id: ${{ env.aws_api_vpc_id }}
          terraform_state_s3_key_prefix: ${{ env.main_state_prefix }}
          build_path: ${{ env.main_build_path }}
          automation_build_url: ${{ env.automation_build_url }}
          environment: ${{ env.environment }}
          google_project_id: ${{ env.google_project_id }}
          aws_deploy_account: ${{ env.aws_deploy_account }}
          aws_api_account: ${{ env.aws_api_account }}
          aws_hackit_account_id: ${{ secrets.AWS_HACKIT_ACCOUNT_ID }}
          aws_deploy_iam_role_name: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          branch: ${GITHUB_REF##*/}
          terraform_import: ${{ github.event.inputs.terraform_import }}
          terraform_remove: ${{ github.event.inputs.terraform_remove }}
          # DANGER ZONE
          # In order to allow you to run a Terraform destroy (that will delete all AWS resources managed by Terraform,
          # you can set terraform_destroy: 'destroy_me'. Not providing a value or any other value except 'destroy_me' will
          # cause nothing to happen. The example here, with the value set to false is to ensure you've read this comment ;)
          terraform_destroy: false
      - name: Build and delpoy image to ECR
        run: |
          echo "[profile deploy_role]" >> ~/.aws/config
          echo "role_arn=arn:aws:iam::${{ env.aws_deploy_account }}:role/${{ secrets.AWS_ROLE_TO_ASSUME }}" >> ~/.aws/config
          echo "source_profile=default" >> ~/.aws/config
          echo "role_session_name=deploy-image-to-ecr" >> ~/.aws/config
          AWS_PROFILE=deploy_role ./docker/sql-to-parquet/deploy.sh

      - name: Generate Self Signed certificate
        run: |
          AWS_DEFAULT_REGION=eu-west-2 AWS_PROFILE=deploy_role ./.github/generate-ssl-keys.sh
