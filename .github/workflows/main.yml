name: CI
env:
  aws_deploy_account: ${{ secrets.AWS_ACCOUNT_DATA_PLATFORM_STG }}
  aws_api_account: ${{ secrets.AWS_API_ACCOUNT_PROD }}
  aws_deploy_region: "eu-west-2"
  google_project_id: ${{ secrets.GOOGLE_PROJECT_ID_STG }}
  aws_api_vpc_id : ${{ secrets.AWS_API_VPC_ID }}
  environment: "stg"
  automation_build_url: "https://github.com/LBHackney-IT/data-platform/actions/workflows/data_platform_stg.yml"

  network_state_prefix: "data-platform-network"
  network_build_path: "./terraform-networking"

  main_state_prefix: "data-platform"
  main_build_path: "./terraform"
  aws_hackit_account_id: ${{ secrets.AWS_HACKIT_ACCOUNT_ID }}
  aws_deploy_iam_role_name: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


on: [ pull_request, push ]

jobs:
  tests:
    name: Test Python Jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run `make test`
        run: |
          cd scripts
          make test
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: 1.0.11

      - name: Add a key to allow access to Infastructure
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.INFRASTRUCTURE_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa ~/.ssh/known_hosts

      - name: Set up dummy Google Cloud Credentials
        run: |
          echo "{}" >> ./google_service_account_creds.json
        shell: bash

      - name: Download external dependencies
        working-directory: "./external-lib"
        run: make all

      - name: Package glue job helpers module
        working-directory: "./scripts"
        run: make dist/data_platform_glue_job_helpers-1.0-py3-none-any.whl

      - name: Run `terraform validate` on Terraform Networking
        working-directory: "./terraform-networking"
        run: |
          terraform init -backend=false
          terraform validate

      - name: Run `terraform validate` on Backend Setup
        working-directory: "./terraform-backend-setup"
        run: |
          terraform init -backend=false
          terraform validate

      - name: Run `terraform validate` on Terraform
        working-directory: "./terraform"
        run: |
          terraform init -backend=false
          terraform validate
  lint:
    name: Run tf lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 0.14.9
      - name: Install tflint
        run: |
          curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint.zip && unzip tflint.zip && rm tflint.zip
      - name: Configuring AWS credentials
        working-directory: "./terraform"
        run: |
          aws configure set region eu-west-2 > /dev/null 2>&1
          aws configure set aws_access_key_id ${{ env.aws_access_key_id }} > /dev/null 2>&1
          aws configure set aws_secret_access_key ${{ env.aws_secret_access_key }} > /dev/null 2>&1
          terraform init -backend-config="region=eu-west-2" -backend-config="dynamodb_table=lbhackney-terraform-state-lock" -backend-config="encrypt=true" -backend-config="workspace_key_prefix=${{ env.main_state_prefix }}" -backend-config="bucket=lbhackney-terraform-state" -backend-config="key=${{ env.main_state_prefix }}/${{ env.environment }}-terraform.tfstate"
      - name: Run `tflint` on main Terraform
        working-directory: "./terraform"
        run: |
          terraform init -backend=false
          ../tflint --init --config="../.tflint.hcl"
          ../tflint --var-file='../config/terraform/stg.tfvars'  --var 'aws_deploy_region=${{ env.aws_deploy_region }}' --var 'aws_deploy_account=${{ env.aws_deploy_account }}' --var 'aws_api_account=${{ env.aws_api_account }}' --var 'aws_hackit_account_id=${{ env.aws_hackit_account_id }}' --var 'aws_deploy_iam_role_name=${{ env.aws_deploy_iam_role_name }}' --var 'environment=${{ env.environment }}' --var 'google_project_id=${{ env.google_project_id }}' --var 'automation_build_url=${{ env.automation_build_url }}' --var 'aws_api_vpc_id=${{ env.aws_api_vpc_id }}' --module --config="../.tflint.hcl" --loglevel=warn .
      - name: Run `tflint` on modules
        working-directory: "./modules"
        run: |
          terraform init -backend=false
          ../tflint --init --config="../.tflint.hcl"
          for module in $(ls .); do echo $module && ../tflint --var-file='../../config/terraform/stg.tfvars'  --var 'aws_deploy_region=${{ env.aws_deploy_region }}' --var 'aws_deploy_account=${{ env.aws_deploy_account }}' --var 'aws_api_account=${{ env.aws_api_account }}' --var 'aws_hackit_account_id=${{ env.aws_hackit_account_id }}' --var 'aws_deploy_iam_role_name=${{ env.aws_deploy_iam_role_name }}' --var 'environment=${{ env.environment }}' --var 'google_project_id=${{ env.google_project_id }}' --var 'automation_build_url=${{ env.automation_build_url }}' --var 'aws_api_vpc_id=${{ env.aws_api_vpc_id }}' --module --config="../.tflint.hcl" --loglevel=warn $module ; done
