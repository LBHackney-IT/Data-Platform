name: Deploy Data-Platform
env:
  aws_deploy_region: "eu-west-2"

  network_state_prefix: "data-platform-network"
  network_build_path: "./terraform-networking"

  main_state_prefix: "data-platform"
  main_build_path: "./terraform"

on:
  workflow_call:
    inputs:
      terraform_import:
        description: "Terraform import statements"
        required: false
        default: ""
        type: string
      terraform_remove:
        description: "Terraform state rm statements"
        required: false
        default: ""
        type: string
      environment:
        description: "Environment to deploy to"
        required: true
        type: string
      automation_build_url:
        description: "Link to where the build pipeline is defined"
        type: string
        required: true
    secrets:
      google_project_id:
        required: true
      aws_deploy_account:
        description: "ID of Account being deployed to"
        required: true
      INFRASTRUCTURE_PRIVATE_KEY:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_API_ACCOUNT_PROD:
        required: true
      AWS_HACKIT_ACCOUNT_ID: 
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true
      AWS_API_VPC_ID:
        required: true
      AWS_HOUSING_VPC_ID:
        required: true
      AWS_MOSAIC_VPC_ID:
        required: true
      GOOGLE_CREDENTIALS:
        required: true


jobs:
  deploy:
    name: Deploy Data Platform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_wrapper: false
          terraform_version: 1.0.11

      - name: Add a key to allow access to Infastructure
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.INFRASTRUCTURE_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa ~/.ssh/known_hosts

      - name: Setup Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install pipenv
        run: |
          sudo apt-get update
          sudo apt-get install pipenv

      - name: Set up Google Cloud Credentials
        run: |
          echo $GOOGLE_CREDENTIALS >> ./google_service_account_creds.json
        shell: bash
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install Dependencies for rds-database-snapshot-replicator Lambda
        working-directory: "./lambdas/rds-database-snapshot-replicator"
        run: npm install

      - name: Install Dependencies for liberator-sftp-to-s3 Lambda
        working-directory: "./lambdas/liberator-sftp-to-s3"
        run: npm install

      - name: Install Dependencies for g-drive-to-s3 Lambda
        working-directory: "./lambdas/g_drive_to_s3"
        run: make install-requirements

      - name: Download External Python Dependencies
        working-directory: "./external-lib"
        run: make all

      - name: Package AWS Glue Job Helpers Module
        working-directory: "./scripts"
        run: make dist/data_platform_glue_job_helpers-1.0-py3-none-any.whl

      - name: Deploy Data Platform Network
        uses: ./.github/actions/terraform-deploy
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_deploy_region: ${{ env.aws_deploy_region }}
          terraform_state_s3_key_prefix: ${{ env.network_state_prefix }}
          build_path: ${{ env.network_build_path }}
          automation_build_url: ${{ inputs.automation_build_url }}
          environment: ${{ inputs.environment }}
          google_project_id: ${{ secrets.google_project_id }}
          aws_deploy_account: ${{ secrets.aws_deploy_account }}
          aws_api_account: ${{ secrets.AWS_API_ACCOUNT_PROD }}
          aws_api_vpc_id: ${{ secrets.AWS_API_VPC_ID }}
          aws_housing_vpc_id: ${{ secrets.AWS_HOUSING_VPC_ID }}
          aws_mosaic_vpc_id: ${{ secrets.AWS_MOSAIC_VPC_ID }}
          aws_hackit_account_id: ${{ secrets.AWS_HACKIT_ACCOUNT_ID }}
          aws_deploy_iam_role_name: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          branch: ${GITHUB_REF##*/}
          terraform_import: ${{ inputs.terraform_import }}
          terraform_remove: ${{ inputs.terraform_remove }}
          # DANGER ZONE
          # In order to allow you to run a Terraform destroy (that will delete all AWS resources managed by Terraform,
          # you can set terraform_destroy: 'destroy_me'. Not providing a value or any other value except 'destroy_me' will
          # cause nothing to happen. The example here, with the value set to false is to ensure you've read this comment ;)
          terraform_destroy: false

      - name: Assign Network Properties
        working-directory: "./terraform-networking"
        run: |
          VPC_ID=$(terraform output vpc_id)
          echo "aws_vpc_id=$VPC_ID" >> ../config/terraform/stg.tfvars

      - name: Deploy Data Platform Infastructure
        uses: ./.github/actions/terraform-deploy
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_deploy_region: ${{ env.aws_deploy_region }}
          terraform_state_s3_key_prefix: ${{ env.main_state_prefix }}
          build_path: ${{ env.main_build_path }}
          automation_build_url: ${{ inputs.automation_build_url }}
          environment: ${{ inputs.environment }}
          google_project_id: ${{ secrets.google_project_id }}
          aws_deploy_account: ${{ secrets.aws_deploy_account }}
          aws_api_account: ${{ secrets.AWS_API_ACCOUNT_PROD }}
          aws_api_vpc_id: ${{ secrets.AWS_API_VPC_ID }}
          aws_housing_vpc_id: ${{ secrets.AWS_HOUSING_VPC_ID }}
          aws_mosaic_vpc_id: ${{ secrets.AWS_MOSAIC_VPC_ID }}
          aws_hackit_account_id: ${{ secrets.AWS_HACKIT_ACCOUNT_ID }}
          aws_deploy_iam_role_name: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          branch: ${GITHUB_REF##*/}
          terraform_import: ${{ inputs.terraform_import }}
          terraform_remove: ${{ inputs.terraform_remove }}
          # DANGER ZONE
          # In order to allow you to run a Terraform destroy (that will delete all AWS resources managed by Terraform,
          # you can set terraform_destroy: 'destroy_me'. Not providing a value or any other value except 'destroy_me' will
          # cause nothing to happen. The example here, with the value set to false is to ensure you've read this comment ;)
          terraform_destroy: false

      - name: Build and Deploy SQL to Parquet Image to ECR
        run: |
          echo "[profile deploy_role]" >> ~/.aws/config
          echo "role_arn=arn:aws:iam::${{ secrets.aws_deploy_account }}:role/${{ secrets.AWS_ROLE_TO_ASSUME }}" >> ~/.aws/config
          echo "source_profile=default" >> ~/.aws/config
          echo "role_session_name=deploy-image-to-ecr" >> ~/.aws/config
          AWS_PROFILE=deploy_role ./docker/sql-to-parquet/deploy.sh

      - name: Generate Self Signed certificate
        run: |
          AWS_DEFAULT_REGION=eu-west-2 AWS_PROFILE=deploy_role ./.github/generate-ssl-keys.sh
